<?php

return;


if ($_POST['dat']) {
    # Скрыть дочерние категории
    $dat3 = Dat::get(['tpl' => 'nav/nav'], ['rec' => $_GET['rec']])[3];
    if ($_POST['dat'][3] <> $dat3) # Флажок скрытия изменился
    { 
        function zzUpdateCatsFlags($catId, $hide) {
            zzBuildChildrenCats($catId, $cats);
            if ($cats) {
                $catsSql = '';
                foreach ($cats as $cat=>$z)
                    $catsSql.=','.$cat;
                Sql::query('UPDATE `$nav/nav` SET dat3='.($hide ? '1' : '0').' WHERE `rec-id` IN ('.substr($catsSql, 1).')');     
            }
        }

        function zzBuildChildrenCats($catId, &$cats) {
            $result = Sql::query('SELECT `rec-id` FROM `$nav/nav` WHERE dat2=?', [$catId]);
            if ($result) {
                while ($row = $result->fetch_assoc()) {
                    $cats[$row['rec-id']] = true;
                    zzBuildChildrenCats($row['rec-id'], $cats);
                }
                $result->free();
            }
        }

        function zzAncestorIsHidden($catId) {
            if ($pdat = Dat::get(['tpl' => 'nav/nav'], ['rec' => $catId])) {
                if ($pdat[3] == 1)
                    return true;
                else
                    return zzAncestorIsHidden($pdat[2]);
            } else
                return false;
        }
        if ($_POST['dat'][3] == '1') {
            zzUpdateCatsFlags($_GET['rec'], 1); # Скрыть и детей
            $udat['arrange-items'] = true;
        } elseif ($_POST['dat'][3] == '0') {
            if (!zzAncestorIsHidden($_POST['dat'][2])) { # Проверить, не скрыт ли родитель. 
                zzUpdateCatsFlags($_GET['rec'], 0); # Снять скрытие и у детей
                $udat['arrange-items'] = true;
            } else {
                $_POST['dat'][3] = '1'; # Отменить открытие
                Blox::prompt('Скрытие категории товаров запрещено, так как скрыта родительская категория  (шаблон nav/nav)', true);
            }
        }
    }
} 
